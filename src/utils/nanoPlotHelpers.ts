import {
  SERVICE_URL,
  DEFAULT_NANOPLOT_BAND,
  DEFAULT_NANOPLOT_LAYOUT,
  DEFAULT_NANOPLOT_X_TRANSFORM,
  DEFAULT_NANOPLOT_Y_TRANSFORM,
} from '../configs/constants';
import Plotly, { Datum, ScatterData } from 'plotly.js-dist-min';
import { LightcurveBand } from '../types';

/**
 * A helper function that fetches lightcurve data used in the nanoplot
 * @param id source ID number to fetch its lightcurve data
 * @returns An array of scatter data that contains one i_flux data point for each of the past 7 days
 */
async function getNanoPlotData(id: number) {
  const response = await fetch(
    `${SERVICE_URL}/lightcurves/${id}/${DEFAULT_NANOPLOT_BAND}`
  );
  const responseJson = (await response.json()) as LightcurveBand;

  const plotData = {
    type: 'scatter',
    x: [] as Datum[],
    y: [] as Datum[],
  };

  // Get only the most recent 7 days worth of i_flux data
  for (let i = 0; i < 7; i++) {
    plotData.x.push(new Date(responseJson.time[i]));
    plotData.y.push(responseJson.i_flux[i]);
  }

  return plotData as ScatterData;
}

/**
 * A helper function that generates the SVG of a lightcurve "nanoplot"
 * @param id source ID used to fetch lightcurve data in the getNanoPlotData helper
 * @returns A stringified SVG generated by a Plotly static plot
 */
export async function getNanoPlotSVG(id: number) {
  const div = document.createElement('div');

  // Fetch the data to be used in the nanoplot and create a plotly plot
  const plotData = await getNanoPlotData(id);
  await Plotly.newPlot(div, [plotData], DEFAULT_NANOPLOT_LAYOUT);

  // Select the most appropriate SVG element from the plotly plot
  const plotGroup = div.querySelector(
    'g.cartesianlayer > .subplot > .overplot > .xy'
  );

  // Remove the transform from the plotGroup so that it renders within the viewBox
  if (!plotGroup) return '';
  plotGroup.removeAttribute('transform');
  plotGroup.setAttribute(
    'transform',
    `scale(${DEFAULT_NANOPLOT_X_TRANSFORM}, ${DEFAULT_NANOPLOT_Y_TRANSFORM})`
  );

  // Use the default layout dims to calculate an appropriate width/height for the new SVG
  const width =
    (DEFAULT_NANOPLOT_LAYOUT.width / 2 + 50) * DEFAULT_NANOPLOT_X_TRANSFORM;
  const height =
    (DEFAULT_NANOPLOT_LAYOUT.height / 4 + 10) * DEFAULT_NANOPLOT_Y_TRANSFORM;

  const cleanedSvg = `
        <svg xmlns="http://www.w3.org/2000/svg" width="${width}" height="${height}" viewBox="0 0 ${width} ${height}">
            ${plotGroup.outerHTML}
        </svg>
    `;

  return cleanedSvg;
}
